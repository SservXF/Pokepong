/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pokepong;

import javafx.application.Application;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCombination;
import javafx.scene.layout.Pane;
import javafx.stage.Screen;
import javafx.stage.Stage;

import gui.ChoiceArena;
import gui.GameView;
import gui.Loading;
import gui.Luncher;
import gui.Menu;
import gui.Page;
import gui.Player;
import gui.PseudoJ1;
import gui.PseudoJ2;
import gui.Rules;
import gui.Settings;
import gui.SoundController;
import model.Court;
import model.RacketController;
import model.Sauvegarde;

public class App extends Application {

    public static Stage primaryStage;
    public static Scene scene;
    public static Pane root;
    public static Rectangle2D screen = Screen.getPrimary().getBounds(); // Attribut pour dimension de l'écran du joueur
    public static boolean bot = true;     // Mode par défaut : 1 JOUEUR (donc bot = true)
    //public static boolean mode_j1 = true;
    public static String suff = Sauvegarde.getLangue();
    //pour le fond
    public static int pokepongArenaI=0;
    public static void setBackPokepongArenaI(){pokepongArenaI=0;}//on remets l'indice à sa valeur de base

    public static boolean enPause = false;
    public static boolean enJeu = false;

    // Variable pour le nombre de PV de chaque joueur (choisit éventuellement par l'utilisateur)
    // ATTENTION //
    // Ne surtout pas mettre l'une des deux valeurs à zéro -> risque de bugs + pas logique
    public static int pv_j1=50;
    public static int pv_j2=50;

    // Représentent la taille de la jauge de pouvoir, donc + l'entier est grand, + la jauge prendra du temps pour se remplir
    public static int power_j1 = 500;
    public static int power_j2 = 500;

    public static Luncher pageLuncher;
    public static Menu pageMenu;
    public static ChoiceArena pageChoiceArena;
    public static Settings pageSettings;
    public static Rules pageRules;
    public static Loading loading;
    public static PseudoJ1 pseudoA;
    public static PseudoJ2 pseudoB;

    public static Page[] allPages;

    // Objets pong
    Button exit2 = new Button();    // Ce bouton représente le bouton de retour depuis le jeu du pong
    Button resume = new Button();
    // On créer les players et le Court dès le début et une seule fois, comme ça on ne recréer pas plusieurs fois les joueurs, le court, et le gameview
    public static Player playerA = new Player();
    public static Player playerB = new Player();
    public static Court court = new Court(playerA, playerB, screen.getWidth(), screen.getHeight(), bot);
    public static GameView gameView;

    public void setBot(boolean b){
        bot = b;
    }

    @Override
    public void start(Stage PS) throws Exception {

        SoundController.theme("theme_menu");
        primaryStage = PS;
        root = new Pane();
        scene = new Scene(root,screen.getWidth(),screen.getHeight());
        // Paramètres de la fenetre
        primaryStage.setTitle("Pokepong");      // Titre de la fenêtre
        primaryStage.getIcons().add(new Image(getClass().getResourceAsStream("/gui/image/pokeball.png")));
        primaryStage.setResizable(false);
        primaryStage.setFullScreenExitKeyCombination(KeyCombination.valueOf("Ctrl+C"));
        primaryStage.setFullScreenExitHint("");
        primaryStage.setFullScreen(true); 

        // On créer le gameview, et on cache directement le pong
        gameView = new GameView(court, root, 1.0);
        court.setGameView(gameView);
        gameView.hidePong();

        pageLuncher = new Luncher(root, scene, gameView, 1);
        pageMenu = new Menu(root, scene, gameView, 1);
        pageChoiceArena = new ChoiceArena(root, scene, gameView, 1);
        pageSettings = new Settings(root, scene, gameView, 1);
        pageRules = new Rules(root, scene, gameView, 1);
        loading = new Loading(root, scene, gameView, 1);
        pseudoA = new PseudoJ1(root, scene, gameView, 1);
        pseudoB = new PseudoJ2(root, scene, gameView, 1);

        Page[] pages = {pageMenu,pageChoiceArena,pageSettings,pageRules,loading,pseudoA};
        allPages = pages;

        // On switch/lance le luncher (ou le menu pour aller plus vite)
        if(Settings.sound_muted){
            SoundController.muteSounds();
        }
        if(Settings.music_muted){
            SoundController.muteMusic();;
        }
        switchMenu();
        // Affichage de la scene
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Page de quelques secondes avec le nom du jeu
    public void switchLuncher() {
        pageLuncher.lunch();
    }

    // Page du menu principal
    public static void switchMenu() {
        gameView.hideTrail();
        pageMenu.lunch();
        bot = false;
    }

    // Page du menu du mode "1 PLAYER"
    public static void switchJ1(){
        App.setBackPokepongArenaI();
        App.bot = true;
        playerB.setIsBot(true);
        playerB.setPseudo("bot");
        GameView.setPseudoB("bot");
        pageChoiceArena.lunch();
    }

    // Page du menu du mode "2 PLAYERS"
    public static void switchJ2() {  
        App.setBackPokepongArenaI();
        App.bot = false;
        playerB.setIsBot(false);
        pageChoiceArena.lunch();
    }

    //Ajout de l'argument String pour garder en mémoire la stage où on était avant d'accéder aux paramètres
    public static void switchSettings() {
        pageSettings.setChoice(0);  // Pour remettre le curseur directement sur le choix d'arène
        pageSettings.lunch();        
    }

    public static void switchRules(){
        pageRules.lunch();
    }

    public static void switchPseudoA(){
        pseudoA.lunch();
    }

    public static void switchPseudoB(){
        pseudoB.lunch();
    }

    // Fonction pour cacher tout le menu (utile avant de passer au pong)
    public static void hideAll(){
        for(Page p : allPages){
            for (Node o : p.allObjects) {
                o.setVisible(false);
            }
        }
    }

    public static void setPowersByArena(){
        switch(pokepongArenaI){
            default:
                playerA.powerBall = RacketController.PowerBall.ELECTRIK;
                playerB.powerBall = RacketController.PowerBall.ELECTRIK;
                break;
            case 1:
                playerA.powerBall = RacketController.PowerBall.FIRE;
                playerB.powerBall = RacketController.PowerBall.FIRE;
                break;
            case 2:
                playerA.powerBall = RacketController.PowerBall.GRASS;
                playerB.powerBall = RacketController.PowerBall.GRASS;
                break;
            case 3:
                playerA.powerBall = RacketController.PowerBall.WATER;
                playerB.powerBall = RacketController.PowerBall.WATER;
                break;
        }
    }

    // Page du jeu de pong
    //Ajout du boolean pour savoir si on étant en jeu, pour ne pas reinitialiser la partie en sortant des paramètres
    public static void switchPong(){
        GameView.setPseudoA(App.court.getPlayerA().getPseudo());
        GameView.setPseudoB(App.court.getPlayerB().getPseudo());
        hideAll();
        configPongKey();
        GameView.pause.setChoice(0);
        Settings.themeG.setDisable(true);
        Settings.themeD.setDisable(true);

        setPowersByArena();
        
        if(enJeu){
            gameView.showPong(pokepongArenaI);
            GameView.pause.showPauseButtons();
            return;
        }
        else{
            if(bot){
                court.setBot(true);
            }
            else{
                court.setBot(false);
            }
        }

        // On powerDown les deux joueurs avant de lancer la partie
        gameView.powerDown(court.playerA);
        gameView.powerDown(court.playerB);

        gameView.showPong(pokepongArenaI);

        // On règle les PV et PP des joueurs avec les attributs donnés
        court.getPlayerA().setPVmax(pv_j1);
        court.getPlayerB().setPVmax(pv_j2);
        court.getPlayerA().setPV(pv_j1);
        court.getPlayerB().setPV(pv_j2);

        court.getPlayerA().setPowermax(power_j1);
        court.getPlayerB().setPowermax(power_j2);
        court.getPlayerA().setPower(0);
        court.getPlayerB().setPower(0);

        // On précise qu'on n'est plus en pause
        enPause = false;
        enJeu = true;

        // Choix du thème
        switch(Settings.themeInt){
            default:
                lunchThemeAuto();
                break;
            case 1:
                SoundController.theme("theme_electrik");
                break;
            case 2:
                SoundController.theme("theme_fire");
                break;
            case 3:
                SoundController.theme("theme_grass");
                break;
            case 4:
                SoundController.theme("theme_water");
                break;
        }

        // On lance l'animation
        gameView.animate(pokepongArenaI);
    }

    public static void lunchThemeAuto(){
        switch(pokepongArenaI){
            default:
                SoundController.theme("theme_electrik");
                break;
            case 1:
                SoundController.theme("theme_fire");
                break;
            case 2:
                SoundController.theme("theme_grass");
                break;
            case 3:
                SoundController.theme("theme_water");
                break;
        }
    }

    public static void configPongKey(){
        scene.setOnKeyPressed(ev -> {
            switch (ev.getCode()) {
                default: break;
                case Z:
                    playerA.state = RacketController.State.GOING_UP;
                    break;
                case S:
                    playerA.state = RacketController.State.GOING_DOWN;
                    break;
                case SPACE:
                    if(Court.getAledroit() && !enPause && !court.getPlayerA().isPowerUp()){
                        if(court.getPlayerA().isPowerUp()){gameView.powerDown(court.playerA);}
                        else{gameView.powerUp(court.playerA);}
                    }
                    break;
                case UP:
                    if(bot==false){
                        playerB.state = RacketController.State.GOING_UP;break;  
                    }else{
                        break;
                    }
                case DOWN:
                    if(bot==false){
                        playerB.state = RacketController.State.GOING_DOWN;break;  
                    }else{
                        break;
                    }
                case P:
                    if(Court.getAledroit() && !enPause && !court.getPlayerB().isPowerUp()){
                        if(court.getPlayerB().isPowerUp()){gameView.powerDown(court.playerB);}
                        else{gameView.powerUp(court.playerB);}
                    }
                    break;
                case ESCAPE:
                    if(Court.getAledroit()){
                        Court.setStatue(!Court.getStatue());
                        if(!Court.getStatue()){
                            GameView.pause.showPauseButtons();
                            enPause = true;
                        }
                        else{
                            GameView.pause.hidePauseButtons();
                            enPause = false;
                        }
                    }
                    break;
            }
        });
        scene.setOnKeyReleased(ev -> {
            switch (ev.getCode()) {
                default: break;
                case Z:
                    if (playerA.state == RacketController.State.GOING_UP) playerA.state = RacketController.State.IDLE;
                    break;
                case S:
                    if (playerA.state == RacketController.State.GOING_DOWN) playerA.state = RacketController.State.IDLE;
                    break;
                case UP:
                    if (playerB.state == RacketController.State.GOING_UP) playerB.state = RacketController.State.IDLE;
                    break;
                case DOWN:
                    if (playerB.state == RacketController.State.GOING_DOWN) playerB.state = RacketController.State.IDLE;
                    break;
            }
        });
    }

    public static void main(String[] args) {
        launch(args);
    }
}
